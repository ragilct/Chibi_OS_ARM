<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\ch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\ch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Nov 22 13:25:32 2015
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TestThread &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1bc]">__user_initial_stackheap</a>
 <LI><a href="#[43]">_port_exit_from_isr</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">BusFaultVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[10]">DebugMonitorVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[7]">HardFaultVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[8]">MemManageVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6]">NMIVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[12]">PendSVVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from cstartup.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[f]">SVCallVector</a> from chcore_v7m.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[13]">SysTickVector</a> from chcore_v7m.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[6d]">Thread1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[a]">UsageFaultVector</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[b]">Vector1C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[c]">Vector20</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[d]">Vector24</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[e]">Vector28</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[11]">Vector34</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[14]">Vector40</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[15]">Vector44</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[16]">Vector48</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[17]">Vector4C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[18]">Vector50</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[19]">Vector54</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1a]">Vector58</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1b]">Vector5C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1c]">Vector60</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1d]">Vector64</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1e]">Vector68</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[1f]">Vector6C</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[20]">Vector70</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[21]">Vector74</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[22]">Vector78</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[23]">Vector7C</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[24]">Vector80</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[25]">Vector84</a> from stm32_dma.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[26]">Vector88</a> from adc_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[27]">Vector8C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[28]">Vector90</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[29]">Vector94</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2a]">Vector98</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2b]">Vector9C</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2c]">VectorA0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2d]">VectorA4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2e]">VectorA8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[2f]">VectorAC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[30]">VectorB0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[31]">VectorB4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[32]">VectorB8</a> from pwm_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[33]">VectorBC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[34]">VectorC0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[35]">VectorC4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[36]">VectorC8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[37]">VectorCC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[38]">VectorD0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[39]">VectorD4</a> from serial_lld.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3a]">VectorD8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3b]">VectorDC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3c]">VectorE0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3d]">VectorE4</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3e]">VectorE8</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[3f]">VectorEC</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[40]">VectorF0</a> from vectors.o(.text) referenced from vectors.o(RESET)
 <LI><a href="#[bd]">__main</a> from __main.o(!!!main) referenced from cstartup.o(.text)
 <LI><a href="#[126]">_idle_thread</a> from chsys.o(.text) referenced from chsys.o(.text)
 <LI><a href="#[43]">_port_exit_from_isr</a> from chcoreasm_v7m.o(.text) referenced from chcore_v7m.o(.text)
 <LI><a href="#[42]">_port_switch_from_isr</a> from chcoreasm_v7m.o(.text) referenced from chcore_v7m.o(.text)
 <LI><a href="#[46]">_port_thread_start</a> from chcoreasm_v7m.o(.text) referenced from chthreads.o(.text)
 <LI><a href="#[4c]">adc_lld_serve_rx_interrupt</a> from adc_lld.o(.text) referenced from adc_lld.o(.text)
 <LI><a href="#[bb]">adccb</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[80]">bmk10_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[82]">bmk11_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[81]">bmk11_setup</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[84]">bmk12_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[83]">bmk12_setup</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[85]">bmk13_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[76]">bmk1_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[77]">bmk2_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[78]">bmk3_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[79]">bmk4_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7a]">bmk5_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7b]">bmk6_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7d]">bmk7_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7c]">bmk7_setup</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7e]">bmk8_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[7f]">bmk9_execute</a> from testbmk.o(.text) referenced from testbmk.o(.constdata)
 <LI><a href="#[44]">chCoreAlloc</a> from chmemcore.o(.text) referenced from chheap.o(.text)
 <LI><a href="#[87]">dyn1_execute</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[86]">dyn1_setup</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[89]">dyn2_execute</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[88]">dyn2_setup</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[8b]">dyn3_execute</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[8a]">dyn3_setup</a> from testdyn.o(.text) referenced from testdyn.o(.constdata)
 <LI><a href="#[90]">evt1_execute</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[8f]">evt1_setup</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[92]">evt2_execute</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[91]">evt2_setup</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[94]">evt3_execute</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[93]">evt3_setup</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[71]">get</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[73]">gett</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[8c]">h1</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[8d]">h2</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[8e]">h3</a> from testevt.o(.text) referenced from testevt.o(.constdata)
 <LI><a href="#[96]">heap1_execute</a> from testheap.o(.text) referenced from testheap.o(.constdata)
 <LI><a href="#[95]">heap1_setup</a> from testheap.o(.text) referenced from testheap.o(.constdata)
 <LI><a href="#[98]">mbox1_execute</a> from testmbox.o(.text) referenced from testmbox.o(.constdata)
 <LI><a href="#[97]">mbox1_setup</a> from testmbox.o(.text) referenced from testmbox.o(.constdata)
 <LI><a href="#[99]">msg1_execute</a> from testmsg.o(.text) referenced from testmsg.o(.constdata)
 <LI><a href="#[9b]">mtx1_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[9a]">mtx1_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[9d]">mtx2_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[9c]">mtx2_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[9f]">mtx3_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[9e]">mtx3_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a1]">mtx4_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a0]">mtx4_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a3]">mtx5_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a2]">mtx5_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a5]">mtx6_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a4]">mtx6_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a7]">mtx7_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a6]">mtx7_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a9]">mtx8_execute</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[a8]">mtx8_setup</a> from testmtx.o(.text) referenced from testmtx.o(.constdata)
 <LI><a href="#[3]">notify</a> from testqueues.o(.text) referenced 4 times from testqueues.o(.data)
 <LI><a href="#[3]">notify</a> from testqueues.o(.text) referenced from testqueues.o(.text)
 <LI><a href="#[49]">notify1</a> from serial_lld.o(.text) referenced from serial_lld.o(.text)
 <LI><a href="#[65]">null_provider</a> from testpools.o(.text) referenced from testpools.o(.text)
 <LI><a href="#[ab]">pools1_execute</a> from testpools.o(.text) referenced from testpools.o(.constdata)
 <LI><a href="#[aa]">pools1_setup</a> from testpools.o(.text) referenced from testpools.o(.constdata)
 <LI><a href="#[70]">put</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[72]">putt</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[4]">pwmpcb</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[ad]">queues1_execute</a> from testqueues.o(.text) referenced from testqueues.o(.constdata)
 <LI><a href="#[ac]">queues1_setup</a> from testqueues.o(.text) referenced from testqueues.o(.constdata)
 <LI><a href="#[af]">queues2_execute</a> from testqueues.o(.text) referenced from testqueues.o(.constdata)
 <LI><a href="#[ae]">queues2_setup</a> from testqueues.o(.text) referenced from testqueues.o(.constdata)
 <LI><a href="#[6f]">read</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[75]">readt</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[b1]">sem1_execute</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b0]">sem1_setup</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b3]">sem2_execute</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b2]">sem2_setup</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b5]">sem3_execute</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b4]">sem3_setup</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[b6]">sem4_execute</a> from testsem.o(.text) referenced from testsem.o(.constdata)
 <LI><a href="#[4a]">spi_lld_serve_rx_interrupt</a> from spi_lld.o(.text) referenced from spi_lld.o(.text)
 <LI><a href="#[4b]">spi_lld_serve_tx_interrupt</a> from spi_lld.o(.text) referenced from spi_lld.o(.text)
 <LI><a href="#[bc]">spicb</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[b7]">thd1_execute</a> from testthd.o(.text) referenced from testthd.o(.constdata)
 <LI><a href="#[b8]">thd2_execute</a> from testthd.o(.text) referenced from testthd.o(.constdata)
 <LI><a href="#[b9]">thd3_execute</a> from testthd.o(.text) referenced from testthd.o(.constdata)
 <LI><a href="#[ba]">thd4_execute</a> from testthd.o(.text) referenced from testthd.o(.constdata)
 <LI><a href="#[53]">thread</a> from testdyn.o(.text) referenced 3 times from testdyn.o(.text)
 <LI><a href="#[4e]">thread1</a> from testbmk.o(.text) referenced 5 times from testbmk.o(.text)
 <LI><a href="#[62]">thread10</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[63]">thread11</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[64]">thread12</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[4f]">thread2</a> from testbmk.o(.text) referenced 4 times from testbmk.o(.text)
 <LI><a href="#[58]">thread2H</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[5a]">thread2L</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[59]">thread2M</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[50]">thread3</a> from testbmk.o(.text) referenced 2 times from testbmk.o(.text)
 <LI><a href="#[5e]">thread3H</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[5f]">thread3HH</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[5c]">thread3L</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[5b]">thread3LL</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[5d]">thread3M</a> from testmtx.o(.text) referenced from testmtx.o(.text)
 <LI><a href="#[6b]">thread4</a> from testsem.o(.text) referenced 2 times from testsem.o(.text)
 <LI><a href="#[60]">thread4a</a> from testmtx.o(.text) referenced 2 times from testmtx.o(.text)
 <LI><a href="#[61]">thread4b</a> from testmtx.o(.text) referenced 2 times from testmtx.o(.text)
 <LI><a href="#[51]">thread8</a> from testbmk.o(.text) referenced from testbmk.o(.text)
 <LI><a href="#[47]">tm_start</a> from tm.o(.text) referenced from tm.o(.text)
 <LI><a href="#[48]">tm_stop</a> from tm.o(.text) referenced from tm.o(.text)
 <LI><a href="#[52]">tmo</a> from testbmk.o(.text) referenced from testbmk.o(.text)
 <LI><a href="#[4d]">tmr</a> from test.o(.text) referenced from test.o(.text)
 <LI><a href="#[45]">wakeup</a> from chschd.o(.text) referenced from chschd.o(.text)
 <LI><a href="#[6e]">write</a> from serial.o(.text) referenced from serial.o(.constdata)
 <LI><a href="#[74]">writet</a> from serial.o(.text) referenced from serial.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[be]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[199]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[19b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[19d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1b2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1b3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[bf]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1b8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[c1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TestThread &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[197]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ca]"></a>__early_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[146]"></a>boardInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cstartup.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_port_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleBehind
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleAhead
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoReschedule
</UL>

<P><STRONG><a name="[46]"></a>_port_thread_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _port_thread_start &rArr; chThdExit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chthreads.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_port_switch_from_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chcoreasm_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _port_switch_from_isr &rArr; chSchDoReschedule
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoReschedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chcore_v7m.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>_port_exit_from_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, chcoreasm_v7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chcore_v7m.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>port_halt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_serve_tx_interrupt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_serve_rx_interrupt
</UL>

<P><STRONG><a name="[172]"></a>_port_irq_epilogue</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, chcore_v7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector88
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector84
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector80
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector7C
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector78
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector74
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector70
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector6C
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorB8
</UL>

<P><STRONG><a name="[13]"></a>SysTickVector</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, chcore_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTickVector &rArr; chSysTimerHandlerI
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysTimerHandlerI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVCallVector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chcore_v7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>_port_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chcore_v7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicSetSystemHandlerPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[9]"></a>BusFaultVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMonitorVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFaultVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManageVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMIVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSVVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFaultVector</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Vector1C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Vector20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Vector24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Vector28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Vector34</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Vector40</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Vector44</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Vector48</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Vector4C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Vector50</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Vector54</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Vector58</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Vector5C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Vector60</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Vector64</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Vector68</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Vector8C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Vector90</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Vector94</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Vector98</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Vector9C</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VectorA0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>VectorA4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>VectorA8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>VectorAC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>VectorB0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>VectorB4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>VectorBC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>VectorC0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>VectorC4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>VectorC8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>VectorCC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>VectorD0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>VectorD8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>VectorDC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>VectorE0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>VectorE4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>VectorE8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>VectorEC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>VectorF0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>_unhandled_exception</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vectors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unhandled_exception
</UL>

<P><STRONG><a name="[174]"></a>nvicEnableVector</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamAllocate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_init
</UL>

<P><STRONG><a name="[175]"></a>nvicDisableVector</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamRelease
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_stop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_stop
</UL>

<P><STRONG><a name="[d0]"></a>nvicSetSystemHandlerPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_init
</UL>

<P><STRONG><a name="[193]"></a>chCondInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chcond.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_setup
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_setup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_setup
</UL>

<P><STRONG><a name="[d2]"></a>chCondSignal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chcond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chCondSignal &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_execute
</UL>

<P><STRONG><a name="[d4]"></a>chCondSignalI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chcond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chCondSignalI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_execute
</UL>

<P><STRONG><a name="[d6]"></a>chCondBroadcastI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, chcond.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[d7]"></a>chCondBroadcast</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chcond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chCondBroadcast
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_execute
</UL>

<P><STRONG><a name="[d9]"></a>chCondWaitS</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, chcond.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>

<P><STRONG><a name="[dd]"></a>chCondWait</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, chcond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chCondWait &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread10
</UL>

<P><STRONG><a name="[de]"></a>chCondWaitTimeoutS</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, chcond.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>

<P><STRONG><a name="[e0]"></a>chCondWaitTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, chcond.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chCondWaitTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread11
</UL>

<P><STRONG><a name="[188]"></a>chThdAddRef</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chdynamic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
</UL>

<P><STRONG><a name="[e1]"></a>chThdRelease</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, chdynamic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolFree
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chRegNextThread
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
</UL>

<P><STRONG><a name="[e4]"></a>chThdCreateFromHeap</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, chdynamic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = chThdCreateFromHeap &rArr; chHeapAlloc &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
</UL>

<P><STRONG><a name="[e7]"></a>chThdCreateFromMemoryPool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, chdynamic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chThdCreateFromMemoryPool &rArr; chPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolAlloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
</UL>

<P><STRONG><a name="[18b]"></a>chEvtRegisterMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chevents.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_execute
</UL>

<P><STRONG><a name="[18c]"></a>chEvtUnregister</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chevents.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_execute
</UL>

<P><STRONG><a name="[18a]"></a>chEvtGetAndClearEvents</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chevents.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt3_setup
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_setup
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_setup
</UL>

<P><STRONG><a name="[18e]"></a>chEvtAddEvents</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chevents.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[e9]"></a>chEvtSignalI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, chevents.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>

<P><STRONG><a name="[ea]"></a>chEvtBroadcastFlagsI</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRequestDataI
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
</UL>

<P><STRONG><a name="[1bd]"></a>chEvtGetAndClearFlags</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>chEvtSignal</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chEvtSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[ec]"></a>chEvtBroadcastFlags</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chEvtBroadcastFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
</UL>

<P><STRONG><a name="[1be]"></a>chEvtGetAndClearFlagsI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chevents.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>chEvtDispatch</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chEvtDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_execute
</UL>

<P><STRONG><a name="[ed]"></a>chEvtWaitOne</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chEvtWaitOne
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[ee]"></a>chEvtWaitAny</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chEvtWaitAny
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[ef]"></a>chEvtWaitAll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chEvtWaitAll
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[f0]"></a>chEvtWaitOneTimeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chEvtWaitOneTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt3_execute
</UL>

<P><STRONG><a name="[f1]"></a>chEvtWaitAnyTimeout</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chEvtWaitAnyTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt3_execute
</UL>

<P><STRONG><a name="[f2]"></a>chEvtWaitAllTimeout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, chevents.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chEvtWaitAllTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt3_execute
</UL>

<P><STRONG><a name="[f3]"></a>_heap_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chheap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[f5]"></a>chHeapInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chheap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_setup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_setup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_setup
</UL>

<P><STRONG><a name="[e5]"></a>chHeapAlloc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, chheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chHeapAlloc &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_execute
</UL>

<P><STRONG><a name="[e3]"></a>chHeapFree</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, chheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_execute
</UL>

<P><STRONG><a name="[f8]"></a>chHeapStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chHeapStatus &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_execute
</UL>

<P><STRONG><a name="[f9]"></a>chMBInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_setup
</UL>

<P><STRONG><a name="[fb]"></a>chMBReset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chMBReset &rArr; chSemResetI
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemResetI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[fd]"></a>chMBPostS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[100]"></a>chMBPost</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chMBPost &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[101]"></a>chMBPostI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBPostI
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[102]"></a>chMBPostAheadS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[103]"></a>chMBPostAhead</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chMBPostAhead &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[104]"></a>chMBPostAheadI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBPostAheadI
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[105]"></a>chMBFetchS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, chmboxes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>

<P><STRONG><a name="[106]"></a>chMBFetch</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chMBFetch &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[107]"></a>chMBFetchI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, chmboxes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMBFetchI
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
</UL>

<P><STRONG><a name="[124]"></a>_core_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chmemcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[1bf]"></a>chCoreAllocI</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chmemcore.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>chCoreAlloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, chmemcore.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chheap.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>chCoreStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmemcore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_execute
</UL>

<P><STRONG><a name="[187]"></a>chPoolInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmempools.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_setup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_execute
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_setup
</UL>

<P><STRONG><a name="[1c0]"></a>chPoolFreeI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>chPoolFree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chmempools.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_execute
</UL>

<P><STRONG><a name="[194]"></a>chPoolLoadArray</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, chmempools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chPoolLoadArray
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_execute
</UL>

<P><STRONG><a name="[1c1]"></a>chPoolAllocI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, chmempools.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>chPoolAlloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chmempools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_execute
</UL>

<P><STRONG><a name="[108]"></a>chMsgSend</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, chmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMsgSend
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread
</UL>

<P><STRONG><a name="[109]"></a>chMsgWait</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, chmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMsgWait
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg1_execute
</UL>

<P><STRONG><a name="[10a]"></a>chMsgRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chMsgRelease &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg1_execute
</UL>

<P><STRONG><a name="[f4]"></a>chMtxInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chmtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_setup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiObjectInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcObjectInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_setup
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_setup
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_setup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_setup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_setup
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_setup
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_setup
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_setup
</UL>

<P><STRONG><a name="[dc]"></a>chMtxLockS</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeoutS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWait
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitS
</UL>

<P><STRONG><a name="[f6]"></a>chMtxLock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiAcquireBus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcAcquireBus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread12
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread11
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread10
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4b
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4a
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3HH
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3M
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3L
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3LL
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2H
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2L
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[1c2]"></a>chMtxTryLockS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chmtx.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>chMtxTryLock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, chmtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_execute
</UL>

<P><STRONG><a name="[f7]"></a>chMtxUnlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReleaseBus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcReleaseBus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread12
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread11
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread10
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4b
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4a
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3HH
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3M
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3L
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3LL
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2H
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2L
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[da]"></a>chMtxUnlockS</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chMtxUnlockS
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeoutS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWait
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
</UL>

<P><STRONG><a name="[10b]"></a>chMtxUnlockAll</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, chmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chMtxUnlockAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
</UL>

<P><STRONG><a name="[152]"></a>chIQInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chIQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_setup
</UL>

<P><STRONG><a name="[10c]"></a>chIQResetI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chIQResetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
</UL>

<P><STRONG><a name="[10d]"></a>chIQPutI</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chIQPutI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
</UL>

<P><STRONG><a name="[10e]"></a>chIQGetTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chIQGetTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gett
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[10f]"></a>chIQReadTimeout</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chIQReadTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
</UL>

<P><STRONG><a name="[153]"></a>chOQInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chqueues.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_setup
</UL>

<P><STRONG><a name="[110]"></a>chOQResetI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chOQResetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
</UL>

<P><STRONG><a name="[111]"></a>chOQPutTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chOQPutTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
</UL>

<P><STRONG><a name="[112]"></a>chOQGetI</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chOQGetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdRequestDataI
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
</UL>

<P><STRONG><a name="[113]"></a>chOQWriteTimeout</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, chqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = chOQWriteTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
</UL>

<P><STRONG><a name="[189]"></a>chRegFirstThread</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, chregistry.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
</UL>

<P><STRONG><a name="[114]"></a>chRegNextThread</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chregistry.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chRegNextThread &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
</UL>

<P><STRONG><a name="[122]"></a>_scheduler_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[d5]"></a>chSchReadyI</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemAddCounterI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQResetI
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQResetI
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemResetI
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlags
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignalI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondBroadcast
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondBroadcastI
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondSignalI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector88
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_serve_rx_interrupt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_serve_rx_interrupt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversionI
</UL>

<P><STRONG><a name="[db]"></a>chSchGoSleepS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExitS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgWait
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAny
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOne
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLockS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWait
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdExit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiExchange
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIgnore
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcConvert
</UL>

<P><STRONG><a name="[df]"></a>chSchGoSleepTimeoutS</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepUntil
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeout
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeoutS
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAllTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAnyTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOneTimeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeoutS
</UL>

<P><STRONG><a name="[d3]"></a>chSchWakeupS</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResume
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgRelease
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondSignal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversion
</UL>

<P><STRONG><a name="[118]"></a>chSchDoRescheduleAhead</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, chschd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>

<P><STRONG><a name="[d8]"></a>chSchRescheduleS</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSetPriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlags
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondBroadcast
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
</UL>

<P><STRONG><a name="[119]"></a>chSchDoRescheduleBehind</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, chschd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdYield
</UL>

<P><STRONG><a name="[cd]"></a>chSchDoReschedule</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, chschd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSchDoReschedule
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_switch_from_isr
</UL>

<P><STRONG><a name="[fa]"></a>chSemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_setup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem3_setup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_setup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_setup
</UL>

<P><STRONG><a name="[fc]"></a>chSemResetI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSemResetI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBReset
</UL>

<P><STRONG><a name="[11a]"></a>chSemReset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSemReset
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
</UL>

<P><STRONG><a name="[11b]"></a>chSemWaitS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, chsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[11c]"></a>chSemWait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chSemWait
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[fe]"></a>chSemWaitTimeoutS</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
</UL>

<P><STRONG><a name="[11d]"></a>chSemWaitTimeout</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chSemWaitTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
</UL>

<P><STRONG><a name="[11e]"></a>chSemSignal</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSemSignal &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
</UL>

<P><STRONG><a name="[ff]"></a>chSemSignalI</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chsem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchI
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadI
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadS
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostI
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostS
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
</UL>

<P><STRONG><a name="[11f]"></a>chSemAddCounterI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSemAddCounterI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
</UL>

<P><STRONG><a name="[120]"></a>chSemSignalWait</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, chsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSemSignalWait
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem3_execute
</UL>

<P><STRONG><a name="[126]"></a>_idle_thread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chsys.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chsys.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>chSysInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, chsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chSysInit &rArr; chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vt_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>chSysTimerHandlerI</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, chsys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chSysTimerHandlerI
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickVector
</UL>

<P><STRONG><a name="[125]"></a>_thread_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[e6]"></a>chThdCreateI</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd2_execute
</UL>

<P><STRONG><a name="[127]"></a>chThdCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd2_execute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd1_execute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem3_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_execute
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_execute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_execute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_execute
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg1_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[128]"></a>chThdSetPriority</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chThdSetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd3_execute
</UL>

<P><STRONG><a name="[129]"></a>chThdResume</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chThdResume &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd2_execute
</UL>

<P><STRONG><a name="[17b]"></a>chThdTerminate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, chthreads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_terminate_threads
</UL>

<P><STRONG><a name="[12a]"></a>chThdSleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd4_execute
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4b
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread4a
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3HH
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3H
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3M
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3L
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2H
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2M
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
</UL>

<P><STRONG><a name="[12b]"></a>chThdSleepUntil</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chThdSleepUntil &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd4_execute
</UL>

<P><STRONG><a name="[12c]"></a>chThdYield</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chThdYield
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchDoRescheduleBehind
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread8
</UL>

<P><STRONG><a name="[12d]"></a>chThdExitS</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, chthreads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>

<P><STRONG><a name="[cc]"></a>chThdExit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chThdExit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_thread_start
</UL>

<P><STRONG><a name="[12e]"></a>chThdWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, chthreads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
</UL>

<P><STRONG><a name="[123]"></a>_vt_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chvt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
</UL>

<P><STRONG><a name="[116]"></a>chVTSetI</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, chvt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
</UL>

<P><STRONG><a name="[117]"></a>chVTResetI</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, chvt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepTimeoutS
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
</UL>

<P><STRONG><a name="[12f]"></a>adcInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adcInit &rArr; adc_lld_init &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[131]"></a>adcObjectInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_init
</UL>

<P><STRONG><a name="[132]"></a>adcStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = adcStart &rArr; adc_lld_start &rArr; dmaStreamAllocate &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>adcStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_stop
</UL>

<P><STRONG><a name="[136]"></a>adcStartConversionI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_start_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmpcb
</UL>

<P><STRONG><a name="[138]"></a>adcStartConversion</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_start_conversion
</UL>

<P><STRONG><a name="[139]"></a>adcStopConversion</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_stop_conversion
</UL>

<P><STRONG><a name="[13b]"></a>adcStopConversionI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_stop_conversion
</UL>

<P><STRONG><a name="[13c]"></a>adcConvert</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_start_conversion
</UL>

<P><STRONG><a name="[13d]"></a>adcAcquireBus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>

<P><STRONG><a name="[13e]"></a>adcReleaseBus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
</UL>

<P><STRONG><a name="[13f]"></a>halInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halInit &rArr; tmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>halIsCounterWithin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>halPolledDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>pwmInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwmInit &rArr; pwm_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[173]"></a>pwmObjectInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_init
</UL>

<P><STRONG><a name="[148]"></a>pwmStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pwmStart &rArr; pwm_lld_start &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>pwmStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_stop
</UL>

<P><STRONG><a name="[1c5]"></a>pwmChangePeriod</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>pwmEnableChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_enable_channel
</UL>

<P><STRONG><a name="[14e]"></a>pwmDisableChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_disable_channel
</UL>

<P><STRONG><a name="[144]"></a>sdInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdInit &rArr; sd_lld_init &rArr; sdObjectInit &rArr; chIQInit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[151]"></a>sdObjectInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sdObjectInit &rArr; chIQInit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_init
</UL>

<P><STRONG><a name="[154]"></a>sdStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdStart &rArr; sd_lld_start &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>sdStop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQResetI
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQResetI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_lld_stop
</UL>

<P><STRONG><a name="[158]"></a>sdIncomingDataI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdIncomingDataI &rArr; chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorD4
</UL>

<P><STRONG><a name="[159]"></a>sdRequestDataI</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
</UL>

<P><STRONG><a name="[145]"></a>spiInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiInit &rArr; spi_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[15b]"></a>spiObjectInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_init
</UL>

<P><STRONG><a name="[15c]"></a>spiStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spiStart &rArr; spi_lld_start &rArr; dmaStreamAllocate &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>spiStop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_unselect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_stop
</UL>

<P><STRONG><a name="[161]"></a>spiSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_select
</UL>

<P><STRONG><a name="[163]"></a>spiUnselect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_unselect
</UL>

<P><STRONG><a name="[164]"></a>spiStartIgnore</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_ignore
</UL>

<P><STRONG><a name="[166]"></a>spiStartExchange</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_exchange
</UL>

<P><STRONG><a name="[168]"></a>spiStartSend</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_send
</UL>

<P><STRONG><a name="[16a]"></a>spiStartReceive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_receive
</UL>

<P><STRONG><a name="[16c]"></a>spiIgnore</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_ignore
</UL>

<P><STRONG><a name="[16d]"></a>spiExchange</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_exchange
</UL>

<P><STRONG><a name="[16e]"></a>spiSend</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_send
</UL>

<P><STRONG><a name="[16f]"></a>spiReceive</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_receive
</UL>

<P><STRONG><a name="[170]"></a>spiAcquireBus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>

<P><STRONG><a name="[171]"></a>spiReleaseBus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
</UL>

<P><STRONG><a name="[1c6]"></a>tmObjectInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tm.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>tmInit</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, tm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[142]"></a>_pal_lld_init</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, pal_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[195]"></a>_pal_lld_setgroupmode</STRONG> (Thumb, 172 bytes, Stack size 36 bytes, pal_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pal_lld_setgroupmode
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>VectorB8</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pwm_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VectorB8
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>pwm_lld_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmInit
</UL>

<P><STRONG><a name="[149]"></a>pwm_lld_start</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, pwm_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pwm_lld_start &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmStart
</UL>

<P><STRONG><a name="[14b]"></a>pwm_lld_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pwm_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicDisableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmStop
</UL>

<P><STRONG><a name="[14d]"></a>pwm_lld_enable_channel</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pwm_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmEnableChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adccb
</UL>

<P><STRONG><a name="[14f]"></a>pwm_lld_disable_channel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pwm_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmDisableChannel
</UL>

<P><STRONG><a name="[39]"></a>VectorD4</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VectorD4 &rArr; sdIncomingDataI &rArr; chEvtBroadcastFlagsI
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlagsI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdIncomingDataI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>sd_lld_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sd_lld_init &rArr; sdObjectInit &rArr; chIQInit
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdInit
</UL>

<P><STRONG><a name="[155]"></a>sd_lld_start</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, serial_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sd_lld_start &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStart
</UL>

<P><STRONG><a name="[157]"></a>sd_lld_stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, serial_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicDisableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStop
</UL>

<P><STRONG><a name="[15a]"></a>spi_lld_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_lld_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>

<P><STRONG><a name="[15d]"></a>spi_lld_start</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, spi_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_lld_start &rArr; dmaStreamAllocate &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
</UL>

<P><STRONG><a name="[160]"></a>spi_lld_stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spi_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStop
</UL>

<P><STRONG><a name="[162]"></a>spi_lld_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSelect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adccb
</UL>

<P><STRONG><a name="[15f]"></a>spi_lld_unselect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUnselect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spicb
</UL>

<P><STRONG><a name="[165]"></a>spi_lld_ignore</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, spi_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiIgnore
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartIgnore
</UL>

<P><STRONG><a name="[167]"></a>spi_lld_exchange</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, spi_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiExchange
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartExchange
</UL>

<P><STRONG><a name="[169]"></a>spi_lld_send</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, spi_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartSend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adccb
</UL>

<P><STRONG><a name="[16b]"></a>spi_lld_receive</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, spi_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReceive
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartReceive
</UL>

<P><STRONG><a name="[1c7]"></a>spi_lld_polled_exchange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_lld.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>Vector6C</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector6C
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Vector70</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector70
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Vector74</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector74
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Vector78</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector78
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Vector7C</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector7C
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Vector80</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector80
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Vector84</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vector84
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>dmaInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lld_init
</UL>

<P><STRONG><a name="[177]"></a>dmaStreamAllocate</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dmaStreamAllocate &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_start
</UL>

<P><STRONG><a name="[178]"></a>dmaStreamRelease</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicDisableVector
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_lld_stop
</UL>

<P><STRONG><a name="[13a]"></a>adc_lld_stop_conversion</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc_lld.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversionI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStopConversion
</UL>

<P><STRONG><a name="[26]"></a>Vector88</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, adc_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vector88
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_port_irq_epilogue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>adc_lld_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_lld_init &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvicEnableVector
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcObjectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
</UL>

<P><STRONG><a name="[133]"></a>adc_lld_start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, adc_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_lld_start &rArr; dmaStreamAllocate &rArr; nvicEnableVector
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStart
</UL>

<P><STRONG><a name="[135]"></a>adc_lld_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adc_lld.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaStreamRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStop
</UL>

<P><STRONG><a name="[137]"></a>adc_lld_start_conversion</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, adc_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcConvert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversion
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversionI
</UL>

<P><STRONG><a name="[196]"></a>adcSTM32EnableTSVREFE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>adcSTM32DisableTSVREFE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc_lld.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>hal_lld_init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, hal_lld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[cb]"></a>stm32_clock_init</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, hal_lld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__early_init
</UL>

<P><STRONG><a name="[182]"></a>test_printn</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_printn
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk13_execute
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
</UL>

<P><STRONG><a name="[181]"></a>test_print</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_print
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk13_execute
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
</UL>

<P><STRONG><a name="[180]"></a>test_println</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_println
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk13_execute
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread
</UL>

<P><STRONG><a name="[184]"></a>test_emit_token</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread12
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread11
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread10
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3HH
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3H
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3M
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3L
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3LL
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2H
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2M
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2L
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg1_execute
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h1
</UL>

<P><STRONG><a name="[1c9]"></a>_test_fail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>_test_assert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn3_execute
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd3_execute
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem4_execute
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem3_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pools1_execute
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx5_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heap1_execute
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt3_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_execute
</UL>

<P><STRONG><a name="[186]"></a>_test_assert_sequence</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _test_assert_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd2_execute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd1_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_execute
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_execute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_execute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_execute
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg1_execute
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox1_execute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt1_execute
</UL>

<P><STRONG><a name="[18f]"></a>_test_assert_time_window</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd4_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_execute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[17a]"></a>test_terminate_threads</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_terminate_threads
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
</UL>

<P><STRONG><a name="[17c]"></a>test_wait_threads</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn2_execute
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn1_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd2_execute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd1_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem1_execute
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues2_execute
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queues1_execute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx8_execute
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx7_execute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx6_execute
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx4_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_execute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_execute
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx1_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[191]"></a>test_cpu_pulse</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3HH
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3H
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3M
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3L
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread3LL
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2H
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2M
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread2L
</UL>

<P><STRONG><a name="[17d]"></a>test_wait_tick</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk8_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thd4_execute
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem2_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx3_execute
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx2_execute
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt2_execute
</UL>

<P><STRONG><a name="[17e]"></a>test_start_timer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk12_execute
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk11_execute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk10_execute
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk9_execute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk7_execute
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk6_execute
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk5_execute
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk4_execute
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk3_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk2_execute
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmk1_execute
</UL>

<P><STRONG><a name="[17f]"></a>TestThread</STRONG> (Thumb, 1424 bytes, Stack size 96 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TestThread &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>thread4</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchGoSleepS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>main</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; TestThread &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSysInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestThread
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcSTM32EnableTSVREFE
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdStart
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmStart
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pal_lld_setgroupmode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ca]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1cd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[45]"></a>wakeup</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, chschd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> chschd.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write &rArr; chOQWriteTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read &rArr; chIQReadTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>put</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = put &rArr; chOQPutTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get &rArr; chIQGetTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>putt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = putt &rArr; chOQPutTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>gett</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gett &rArr; chIQGetTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>writet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = writet &rArr; chOQWriteTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>readt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = readt &rArr; chIQReadTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>tm_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tm.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>tm_stop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tm.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>notify1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_lld.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> serial_lld.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>spi_lld_serve_rx_interrupt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, spi_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_lld_serve_rx_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lld.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>spi_lld_serve_tx_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_lld.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lld.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>adc_lld_serve_rx_interrupt</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, adc_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_lld_serve_rx_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchReadyI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_lld.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>tmr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, test.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> test.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>thread1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thread1 &rArr; chMsgRelease &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>bmk1_execute</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bmk1_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>bmk2_execute</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bmk2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>thread2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testbmk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>bmk3_execute</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bmk3_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>bmk4_execute</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmk4_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchWakeupS
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>bmk5_execute</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmk5_execute &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdWait
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>bmk6_execute</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmk6_execute &rArr; test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>thread3</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thread3 &rArr; chSemWait
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>bmk7_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbmk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>bmk7_execute</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bmk7_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_terminate_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>thread8</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thread8 &rArr; chThdYield
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>bmk8_execute</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmk8_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_terminate_threads
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>bmk9_execute</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmk9_execute &rArr; chIQGetTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>tmo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testbmk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>bmk10_execute</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bmk10_execute &rArr; test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTSetI
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chVTResetI
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>bmk11_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testbmk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>bmk11_execute</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmk11_execute &rArr; test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>bmk12_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testbmk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>bmk12_execute</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bmk12_execute &rArr; test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_start_timer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>bmk13_execute</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, testbmk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bmk13_execute &rArr; test_printn
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_println
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_print
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_printn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testbmk.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>thread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testdyn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>dyn1_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testdyn.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>dyn1_execute</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, testdyn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dyn1_execute &rArr; chThdCreateFromHeap &rArr; chHeapAlloc &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>dyn2_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testdyn.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>dyn2_execute</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, testdyn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dyn2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolFree
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolAlloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromMemoryPool
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>dyn3_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testdyn.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>dyn3_execute</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, testdyn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dyn3_execute &rArr; chThdCreateFromHeap &rArr; chHeapAlloc &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chRegNextThread
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chRegFirstThread
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateFromHeap
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdRelease
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdAddRef
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testdyn.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>evt1_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtGetAndClearEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>h1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>h2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>h3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>evt1_execute</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, testevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evt1_execute &rArr; chEvtDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtDispatch
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtUnregister
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtRegisterMask
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>evt2_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtGetAndClearEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>thread1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread1 &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtSignal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>thread2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread2 &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtBroadcastFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>evt2_execute</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, testevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = evt2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAny
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOne
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtAddEvents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtGetAndClearEvents
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtUnregister
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtRegisterMask
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_time_window
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>evt3_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testevt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtGetAndClearEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>evt3_execute</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, testevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evt3_execute &rArr; chEvtWaitAllTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAllTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitAnyTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chEvtWaitOneTimeout
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testevt.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>heap1_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testheap.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testheap.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>heap1_execute</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, testheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = heap1_execute &rArr; chHeapAlloc &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCoreStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapFree
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chHeapAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testheap.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>mbox1_setup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, testmbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbox1_setup &rArr; chMBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmbox.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>mbox1_execute</STRONG> (Thumb, 1442 bytes, Stack size 24 bytes, testmbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbox1_execute &rArr; chMBFetch &rArr; chSemWaitTimeoutS &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetchI
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBFetch
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAheadI
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostAhead
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPostI
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMBReset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmbox.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>thread</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thread &rArr; chMsgSend
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmsg.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>msg1_execute</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, testmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msg1_execute &rArr; chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMsgWait
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmsg.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>mtx1_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmtx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>thread1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread1 &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>mtx1_execute</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mtx1_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>mtx2_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmtx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>thread2L</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread2L &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>thread2M</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread2M &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>thread2H</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread2H &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>mtx2_execute</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mtx2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_time_window
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>mtx3_setup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtx3_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>thread3LL</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread3LL &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>thread3L</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread3L &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>thread3M</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread3M &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>thread3H</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread3H &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>thread3HH</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread3HH &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cpu_pulse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>mtx3_execute</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mtx3_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_time_window
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>mtx4_setup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtx4_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>thread4a</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread4a &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>thread4b</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread4b &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>mtx4_execute</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mtx4_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>mtx5_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmtx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>mtx5_execute</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mtx5_execute &rArr; chMtxLock &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockAll
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxTryLock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlockS
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>mtx6_setup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtx6_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>thread10</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thread10 &rArr; chCondWait &rArr; chMtxLockS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>mtx6_execute</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mtx6_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondSignalI
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>mtx7_setup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtx7_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>mtx7_execute</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mtx7_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondBroadcast
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>mtx8_setup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mtx8_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>thread11</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thread11 &rArr; chCondWaitTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondWaitTimeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>thread12</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread12 &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxUnlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chMtxLock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>mtx8_execute</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, testmtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mtx8_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chCondSignal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmtx.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>null_provider</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testpools.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> testpools.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>pools1_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testpools.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testpools.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>pools1_execute</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, testpools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pools1_execute &rArr; chPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolLoadArray
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolFree
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chPoolAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testpools.o(.constdata)
</UL>
<P><STRONG><a name="[3]"></a>notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testqueues.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> testqueues.o(.data)
<LI> testqueues.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>queues1_setup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = queues1_setup &rArr; chIQInit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>thread1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thread1 &rArr; chIQGetTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>queues1_execute</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = queues1_execute &rArr; chIQReadTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQReadTimeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQGetTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQPutI
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chIQResetI
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>queues2_setup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queues2_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>thread2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thread2 &rArr; chOQPutTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>queues2_execute</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, testqueues.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = queues2_execute &rArr; chOQWriteTimeout &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQWriteTimeout
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQGetI
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQPutTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chOQResetI
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testqueues.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>sem1_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testsem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>thread1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thread1 &rArr; chSemWait
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>sem1_execute</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sem1_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemAddCounterI
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignal
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>sem2_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testsem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>thread2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = thread2 &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>sem2_execute</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sem2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWaitTimeout
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_time_window
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>sem3_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testsem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>thread3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thread3 &rArr; chSemSignal &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>sem3_execute</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sem3_execute &rArr; chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalWait
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>thread4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread4
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>sem4_execute</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, testsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sem4_execute &rArr; chThdCreateStatic &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemWait
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemReset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemSignalI
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSemInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chSchRescheduleS
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testsem.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>thread</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testthd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_emit_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testthd.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>thd1_execute</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, testthd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = thd1_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testthd.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>thd2_execute</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, testthd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = thd2_execute &rArr; test_wait_threads &rArr; chThdWait &rArr; chThdRelease &rArr; chHeapFree &rArr; chMtxUnlock &rArr; chSchWakeupS
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdResume
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateStatic
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdCreateI
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_threads
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testthd.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>thd3_execute</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, testthd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = thd3_execute &rArr; chThdSetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSetPriority
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testthd.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>thd4_execute</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, testthd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = thd4_execute &rArr; test_wait_tick &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleepUntil
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wait_tick
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_test_assert_time_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testthd.o(.constdata)
</UL>
<P><STRONG><a name="[4]"></a>pwmpcb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwmpcb
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversionI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>adccb</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adccb
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_send
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_select
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_lld_enable_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>spicb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spicb
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lld_unselect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>Thread1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Thread1 &rArr; chThdSleep &rArr; chSchGoSleepTimeoutS
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chThdSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
